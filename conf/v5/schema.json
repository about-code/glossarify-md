{
    "$schema": "http://json-schema.org/draft-07/schema#"
    ,"$id": "https://raw.githubusercontent.com/about-code/glossarify-md/v6.3.3/conf/v5/schema.json"
    ,"type": "object"
    ,"title": "Configuration Schema"
    ,"description": "Load the configuration schema from your project's node_modules folder, for example './node_modules/glossarify-md/conf/v5/schema.json', or from a GitHub major release tag when installed globally, for example https://raw.githubusercontent.com/about-code/glossarify-md/v5.0.0/conf/v5/schema.json\nUse glossarify-md --init [--local] to generate a config with one or the other.\nNote that the configuration schema version is independent from the glossarify-md release version. Configuration schema version 5 introduced with glossarify-md v5.0.0 may still be used with glossarify-md v6.0.0 or v7.0.0. if there are no breaking changes in the schema."
    ,"properties": {
        "baseDir": {
            "description": "Path to directory where to search for the glossary file and markdown files. All paths in a config file will be relative to 'baseDir' while 'baseDir' itself, when relative, must be relative to the location of the config file - or the current working directory when provided via command line."
            ,"type": "string"
            ,"default": "./docs"
        }
        ,"excludeFiles": {
            "description": "An array of files or file name patterns that should not be included in any processing."
            ,"type": "array"
            ,"items": {
                "type": "string"
            }
            ,"default": ["node_modules", ".git"]
        }
        ,"force": {
            "description": "Choose true, only if you know the consequences."
            ,"type": "boolean"
            ,"default": false
        }
        ,"generateFiles": {
            "description": "File generation options."
            ,"$ref": "#/$defs/generateFiles"
            ,"default": {
                "listOf": []
            }
        }
        ,"glossaries": {
            "description": "An array of glossaries. Allows for different kinds of glossaries and definitions."
            ,"type": "array"
            ,"items": {
                "$ref": "#/$defs/glossaryFile"
            }
            ,"default": [
                { "file": "./glossary.md", "termHint": "" }
            ]
        }
        ,"ignoreCase": {
            "description": "Find and link every occurrence of a term no matter how it is spelled."
            ,"type": "boolean"
            ,"default": false
        }
        ,"includeFiles": {
            "description": "Path or glob patterns of files to include for linking to glossaries."
            ,"type": "array"
            ,"items": {
                "type": "string"
            }
            ,"default": ["."]
        }
        ,"indexing": {
            "description": "Options configuring the indexer."
            ,"$ref": "#/$defs/indexing"
            ,"default": {
                "groupByHeadingDepth": 6
                ,"headingDepths": [1,2,3,4,5,6]
            }
        }
        ,"i18n": {
            "description": "i18n and collation options. See https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Collator/Collator."
            ,"$ref": "#/$defs/i18n"
            ,"default": {
                "locale": "en"
            }
        }
        ,"keepRawFiles": {
            "description": "Glob patterns for (markdown) files to copy from 'baseDir' to 'outDir' but to ignore by the linker. Non-markdown files will be ignored anyways."
            ,"type": "array"
            ,"items": {
                "type": "string"
            }
            ,"default": []
        }
        ,"linking": {
            "description": "Options to control linkification behavior."
            ,"$ref": "#/$defs/linking"
            ,"default": {
                "baseUrl": ""
                ,"paths": "relative"
                ,"pathRewrites": {}
                ,"pathComponents": ["path", "file", "ext"]
                ,"mentions": "all"
                ,"headingDepths": [2,3,4,5,6]
                ,"headingIdAlgorithm": "github"
                ,"headingIdPandoc": false
                ,"headingAsLink": true
                ,"byReferenceDefinition": true
                ,"limitByTermOrigin": []
                ,"limitByAlternatives": 10
            }
        }
        ,"outDir": {
            "description": "Path to directory where to write processed files to."
            ,"type": "string"
            ,"default": "../docs-glossarified"
        }
        ,"outDirDropOld": {
            "description": "If true, remove old 'outDir' before creating a new one. Otherwise just overwrite old files. Default: true"
            ,"type": "boolean"
            ,"default": true
        }
        ,"reportNotMentioned": {
            "description": "Report on terms which exist in a glossary but have neither been mentioned directly nor with any of its aliases."
            ,"type": "boolean"
            ,"default": false
        }
        ,"unified": {
            "description": "Extended *unified* and *remark* configuration as described in https://github.com/unifiedjs/unified-engine/blob/main/doc/configure.md\nYou may want to provide such a configuration for loading *remark* plug-ins you've installed yourself. You likely require such plug-ins if your input files use third-party syntax which is not covered by the CommonMark specification. glossarify-md only supports CommonMark, GitHub Flavoured Markdown (GFM) and Footnotes by default. For additional remark plug-ins see https://github.com/remarkjs/awesome-remark\nNote that this configuration is not to be considered part of glossarify-md's own configuration interface! glossarify-md can not be held responsible for issues arising from loading additional plug-ins.\nIf you like to keep *unified* configuration separate use e.g. '{ \"unified\": { \"rcPath\": \"../unified.conf.json\"}} to load a unified configuration from an external file."
            ,"$ref": "#/$defs/unified"
            ,"default": {}
        }
        ,"dev": {
            "descriptions": "Options for testing and debugging"
            ,"$ref": "#/$defs/dev"
            ,"default": {}
        }
    }
    ,"$defs": {
        "csvDialect": {
            "description": "A CSV dialect descriptor. Similar to dialect in a https://frictionlessdata.io tabular data resource schema."
            ,"type": "object"
            ,"properties": {
              "delimiter": {
                "description": "A character sequence to use as the field separator."
                ,"type": "string"
                ,"default": ";"
              }
              ,"quoteChar": {
                "description": "A one-character string for surrounding field values in CSV data (no matter whether being a numeric value or an alphanumeric value or something else). Uses the quote character \" by default. A CSV field whose field value is text containing quotes is required to embed the whole text value between two `quoteChar` as well as escaping the quotes in the text data using `escapeChar`. For example a raw value of ;This is \"quoted\" text; is expected to be encoded in CSV as ;\"This is \"\"quoted\"\" text\"; where the outer quotes are `quoteChars` and the inner quotes each are preceeded by an `escapeChar` (which is a quote character by default, either)."
                ,"type": "string"
                ,"default": "\""
              },
              "escapeChar": {
                "description": "Specifies a one-character string to use as an escape character within a field value. Uses the quote \" character as a default which requires encoding quotes in text data using two consecutive quotes (one being the escape character and one being the actual quote of the data). This is a very common encoding scheme. However, change this to an empty string to disable escaping, completely or use another character as needed."
                ,"type": "string"
                ,"default": "\""
              }
            }
            ,"required": [ "delimiter" ]
        }
        ,"csvTableSchema": {
            "description": "A mapping of CSV table fields onto SKOS terms, e.g. \n\"fields\": [\n{ \"rdfType\": \"http://www.w3.org/2004/02/skos/core#Concept \"},\n{ \"rdfType\": \"http://www.w3.org/2004/02/skos/core#prefLabel \"}\n]. Aims to be compatible with https://frictionlessdata.io Tabular Data Resource schema."
            ,"type": "object"
            ,"properties": {
                "fields": {
                    "type": "array"
                    ,"minItems": 1
                    ,"items": {
                        "$ref": "#/$defs/csvTableSchemaField"
                    }
                }
            }
            ,"required": ["fields"]
        }
        ,"csvTableSchemaField": {
            "type": "object"
            ,"properties": {
                "name": {
                    "$ref": "#/$defs/csvTableSchemaFieldName"
                }
            }
        }
        ,"csvTableSchemaFieldName": {
            "description": "A name for this field."
            ,"type": "string"
            ,"default": "http://www.w3.org/2004/02/skos/core#"
        }
        ,"generateFiles": {
            "type": "object"
            ,"properties": {
                "indexFile": {
                    "description": "Generate a file with a list of glossary terms and where they have been used."
                    ,"type": "object"
                    ,"$ref": "#/$defs/indexFile"
                }
                ,"indexFiles": {
                    "description": "Similar to 'indexFile' but allows you to split terms from multiple glossaries into distinct book indexes. Useful if you have multiple 'glossaries' or when you're using the 'glossaries' option with a file glob. In the latter case it helps you to restrict which terms should become part of the book index."
                    ,"type": "array"
                    ,"items": {
                        "$ref": "#/$defs/indexFile"
                    }
                }
                ,"listOf": {
                    "description": "Generate an arbitrary list of links into your documents. For example, to generate a List of code samples configure a class 'listing' and add anchors `<a class='listing' title='My Sample 1' id='sample-1'/>` before your sample code blocks."
                    ,"type": "array"
                    ,"items": {
                        "$ref": "#/$defs/listOfItemsFile"
                    }
                }
                ,"listOfFigures": {
                    "description": "Generate a file with a list of figures and where they can be found."
                    ,"type": "object"
                    ,"$ref": "#/$defs/listOfItemsFile"
                }
                ,"listOfTables": {
                    "description": "Generate a file with a list of tables and where they can be found."
                    ,"type": "object"
                    ,"$ref": "#/$defs/listOfItemsFile"
                }
            }
        }
        ,"glossaryFile": {
            "type": "object"
            ,"properties": {
                "export": {
                    "description": "Export terms from the markdown file as a JSON glossary. Output will contain JSON-LD mappings onto http://w3.org/skos for interoperability with knowledge organization systems supporting SKOS."
                    ,"since": "6.0.0"
                    ,"oneOf": [
                        {
                            "$ref": "#/$defs/glossaryFileExport"
                        },
                        {
                            "type": "array"
                            ,"items": { "$ref": "#/$defs/glossaryFileExport" }
                        }
                    ]
                }
                ,"file": {
                    "description": "Name of the glossary file. Conventional default is *glossary.md*. You can use a glob pattern to enable cross-linking of headings across multiple files. Note that 'termHint' and 'title' will be ignored if 'file' is a glob pattern."
                    ,"type": "string"
                }
                ,"import": {
                    "description": "Import a JSON glossary (see 'export'). Generates a glossary markdown file from imported terms. Advanced: if the optional 'jsonld' library is installed glossarify-md will assume the JSON file to be a JSON-LD file. If it contains mappings of its custom attribute names onto well-known names from the W3C SKOS vocabulary then glossarify-md may understand the file even if it has a different structure than files exported by glossarify-md itself."
                    ,"$ref": "#/$defs/glossaryFileImport"
                    ,"since": "6.0.0"
                }
                ,"linkUris": {
                    "description": "Set this to true to hyperlink occurrences of a term to an 'authoritative' web glossary using a term's URI as lookup URL (default: false). May be used together with a glossary's 'uri' option. When 'linkUris' is 'true' glossarify-md uses the glossary markdown file as a source of link titles (tooltips) or for other internal processing, only, but won't generate links from documents to the markdown glossary, anymore, but from documents to an external web page."
                    ,"type": "boolean"
                    ,"since": "6.0.0"
                }
                ,"sort": {
                    "description": "If present, sort terms in output glossary. Default: None. See also i18n options."
                    ,"type": "string"
                    ,"enum": ["asc", "desc"]
                }
                ,"showUris": {
                    "description": "Whether to render a term's URI in the glossary (currently for imported glossaries, only). May be a markdown snippet using a placeholder `${uri}` to control URI formatting."
                    ,"oneOf": [
                        { "type": "boolean", "description": "`true` or `false`"}
                        ,{ "type": "string", "description": "Can be a Markdown snippet using a placeholder `${uri}`." }
                    ]
                    ,"since": "6.0.0"
                }
                ,"termHint": {
                    "description": "A symbol to append to a link to denote that the term refers to a glossary term."
                    ,"type": "string"
                }
                ,"uri": {
                    "description": "A namespace or vocabulary identifier used as a prefix to construct URIs for glossary terms. Term URIs may be used to identify a concept within a Semantic Web or Linked Data Context or just to locate an external web page with a human readable definition. See also option `linking.baseUrl`."
                    ,"type": "string"
                    ,"format": "uri"
                    ,"since": "6.0.0"
                }
            }
            ,"required": ["file"]
            ,"not": {
                "anyOf": [
                    { "required": ["import", "export"] }
                ]
            }
        }
        ,"glossaryFileExport": {
            "type": "object",
            "properties": {
                "file": {
                    "description": "A JSON file name to write exported terms to. Recommended file extension is '.json' or '.jsonld'"
                    ,"type": "string"
                    ,"default": ""
                }
                ,"context": {
                    "description": "File path or URL to a custom JSON-LD context document. JSON-LD contexts map terms from glossarify-md's export format onto terms of the well-known W3C SKOS vocabulary. If you want to import terms to another application supporting JSON-LD but not SKOS, then you can provide a custom JSON-LD context document with mappings of glossarify-md's terminology onto the one understood by the target application."
                    ,"type": "string"
                }
            }
            ,"required": ["file"]
        }
        ,"glossaryFileImport": {
            "type": "object",
            "properties": {
                "file": {
                    "description": "The file to import terms from. Supported file content types: 'application/json', 'application/ld+json', 'application/n-quads'."
                    ,"type": "string"
                    ,"default": ""
                }
                ,"context": {
                    "description": "File path or URL to a custom JSON-LD context document (application/ld+json) mapping format terminology (attributes, type names) of a JSON data document ('application/json') onto well-known W3C SKOS terminology."
                    ,"type": "string"
                }
            }
            ,"if": {
                "properties": {
                    "file": {
                        "type": "string",
                        "pattern": "^(.*).csv$"
                    }
                }
            }
            ,"then": {
                "properties": {
                    "title": {
                        "type": "string"
                        ,"default": "Glossary"
                    }
                    ,"dialect": {
                        "$ref": "#/$defs/csvDialect"
                        ,"default": {
                            "delimiter": ";"
                        }
                    }
                    ,"schema": {
                        "$ref": "#/$defs/csvTableSchema"
                    }
                }
            }
            ,"required": ["file"]
        }
        ,"indexFile": {
            "type": "object"
            ,"properties": {
                "file":  {
                    "description": "Path relative to 'outDir' where to create the index markdown file."
                    ,"type": "string"
                }
                ,"title": {
                    "description": "The page title for the index file. If missing the application uses a default value."
                    ,"type": "string"
                }
                ,"glossary": {
                    "description": "When you configured multiple glossaries, then this option can be used to generate an index file with terms of a particular glossary, only. Use with `generateFiles.indexFiles` (not `generateFiles.indexFile`). Since v5.1.0."
                    ,"type": "string"
                }
                ,"hideDeepLinks": {
                    "description": "When this is `false` (default) then term occurrences in sections deeper than `indexing.groupByHeadingDepth` will be represented as short numeric links attached to a parent heading at depth `indexing.groupByHeadingDepth`. With this option being `true` you can disable these \"deep\" section links. Note that index file generation also depends on the kind of headings being indexed *at all* (see `indexing.headingDepths`). Since v6.1.0."
                    ,"type": "boolean"
                }
            }
            ,"required": ["file"]
        }
        ,"indexing": {
            "type": "object"
            ,"properties": {
                "groupByHeadingDepth": {
                    "description": "Level of detail by which to group occurrences of terms or syntactic elements in generated files (Range [min, max]: [0, 6]). For example, use 0 to not group at all; 1 to group things at the level of document titles, etc. Configures the indexer. The option affects any files generated from the internal AST node index."
                    ,"type": "integer"
                    ,"minimum": 0
                    ,"maximum": 6
                }
                ,"headingDepths": {
                    "description": "An array with items in a range of 1-6 denoting the depths of headings that should be indexed for cross-linking. Most of the time `linking.headingDepths` should be preferred to exclude certain headings from term-based auto linking. Excluding headings from indexing not only affects auto-linking but more such as path resolution for manual ID-based cross-links, generation of lists or book indexes and other features. Excluding headings from indexing is mostly a performance optimization applicable when headings at a particular level are never used or never required to be linkified."
                    ,"type": "array"
                    ,"items": {
                        "type": "integer"
                        ,"minimum": 1
                        ,"maximum": 6
                    }
                }
            }
        }
        ,"listOfItemsFile": {
            "type": "object"
            ,"properties": {
                "file":  {
                    "description": "Path relative to 'outDir' where to create the index markdown file."
                    ,"type": "string"
                }
                ,"class": {
                    "description": "The class is used to compile lists of content elements. Elements with a common class will be compiled into the same list."
                    ,"type": "string"
                }
                ,"title": {
                    "description": "The page title for the index file. If missing the application uses a default value."
                    ,"type": "string"
                }
                ,"pattern": {
                    "description": "A regular expression which when matching against text will generate an entry in the given list. The expression may contain a capture group which extracts a list item title. A match will result in an URL-addressable HTML node being added to the output."
                    ,"type": "string"
                }
            }
        }
        ,"i18n": {
            "type": "object"
            ,"properties": {
                "caseFirst": {
                    "description": "Whether upper case or lower case should sort first. Default: 'false' (Use locale's default). See https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Collator/Collator"
                    ,"type": "string"
                    ,"enum": ["upper", "lower", "false"]
                }
                ,"ignorePunctuation": {
                    "description": "Whether punctuation should be ignored. Default: false. See https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Collator/Collator"
                    ,"type": "boolean"
                }
                ,"locale": {
                    "description": "The locale to use for operations such as sorting. See https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Collator/Collator"
                    ,"type": "string"
                }
                ,"localeMatcher": {
                    "description": "The locale matching algorithm to use. Default: 'best fit'. See https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Collator/Collator"
                    ,"type": "string"
                    ,"enum": ["best fit", "lookup"]
                }
                ,"numeric": {
                    "description": "Whether to use numeric collation. Default: false. See https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Collator/Collator"
                    ,"type": "boolean"
                }
                ,"sensitivity": {
                    "description": "Which differences in the strings should lead to non-zero result values. Default: 'variant' for sorts, locale dependent for searches. See https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Collator/Collator"
                    ,"type": "string"
                    ,"enum": ["base", "accent", "case", "variant"]
                }
                ,"usage": {
                    "description": "Whether the comparison is for sorting or for searching for matching strings. Default: 'sort'. See https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Collator/Collator"
                    ,"type": "string"
                    ,"enum": ["sort", "search"]
                }
            }
        }
        ,"linking": {
            "type": "object"
            ,"properties": {
                "baseUrl": {
                    "description": "The base URL to use for (web-)linking. Use `paths: \"absolute\"` to (cross-)link terms by their term URLs rather than by relative file paths. A term URL is a combination of `baseUrl` + `path,file,ext` + `#term-fragment` where `path,file,ext` can be customized using `linking.pathComponents`. Linked Data URIs: A term URL will be considered a term's (vocabulary) URI, too. However, if the term URL can not be guaranteed to be a _long lasting_ identifier for the term's definition or doesn't match its predefined URI, then you might want to declare a dedicated URI per glossary. It will be used as an URI prefix to the glossary's terms (see also option `glossaries[i].uri`)."
                    ,"type": "string"
                    ,"format": "url"
                }
                ,"paths": {
                    "description": "Control how paths to linked documents will be constructed. When choosing \"absolute\" you may set a \"baseUrl\" as well. Without a base URL absolute file system paths will be generated."
                    ,"type": "string"
                    ,"enum": ["relative", "absolute", "none"]
                }
                ,"pathComponents": {
                    "description": "Adjust which path components should make it into auto-generated links. glossarify-md won't rewrite your own links."
                    ,"type": "array"
                    ,"maxItems": 3
                    ,"items": {
                        "type": "string",
                        "enum": ["path", "file", "ext"]
                    }
                    ,"since": "6.0.0"
                }
                ,"pathRewrites": {
                    "description": "KEY-VALUE map where VALUE is a single search string or an array of strings or regular expressions (RegExp) and KEY is the replacement/rewrite string. Path rewriting won't change the output folder structure but is intended to be used when output folder structure changes after glossarify-md's own processing. Other glossarify-md options affect link paths and URLs and need to be considered in rewrite rules. Be aware that _URLs_ can only be rewritten when the URL is based on 'baseUrl'. If you need path rewriting because the published directory layout differs from 'outDir' then you may find rewriting absolute paths ('paths: absolute') or URLs based on 'baseUrl' easier than than rewriting relative paths. Relative paths can be harder to get right and thus are more likely to result in dead links."
                    ,"type": "object"
                    ,"since": "6.1.0"
                }
                ,"mentions": {
                    "description": "Control the link density and whether every occurrence of a term in your documents should be linked with its glossary definition or only the first occurrence within a particular range."
                    ,"type": "string"
                    ,"enum": ["all", "first-in-paragraph"]
                }
                ,"headingDepths": {
                    "description": "An array of numerical values each in a range of 1-6 denoting the depths of headings that should participate in term-based link creation (\"linkification\"). Note the dependency on `indexing.headingDepths`: The latter controls which headings to index as \"terms\" *at all* so only indexed headings can be linkified at all. As you likely guess this means that configuring `indexing.headingDepths: [1]` but `linking.headingDepths:[1,2]` would *not* linkify term headings at depth `2` because they haven't been indexed, before. Instead with `indexing.headingDepths: [1,2,3]` *they would* because then headings at depth 1 to 3 would be indexed which includes headings at depth `2`, of course. Or long story short: `linking.headingDepths` is expected to be a fully enclosed subset of `indexing.headingDepths`."
                    ,"type": "array"
                    ,"items": {
                        "type": "integer"
                        ,"minimum": 1
                        ,"maximum": 6
                    }
                }
                ,"headingIdAlgorithm": {
                    "description": "Algorithm to use for generating heading IDs. The \"github\" algorithm (default) produces easier to read IDs but only guarantees uniqueness per file. Use one of the cryptographic hash functions to have IDs be unique across all output files. Hash functions are likely to be required when concatenating output files with tools like pandoc ( https://pandoc.org )."
                    ,"enum": ["github", "md5", "md5-7", "sha256", "sha256-7"]
                    ,"since": "6.0.0"
                }
                ,"headingAsLink": {
                    "description": "Whether to linkify headings. Some Markdown-to-HTML renderers may require this is to be true to generate navigable HTML (e.g. VuePress and GitHub's MD preview). You may be able to use 'false' when other reference mechanisms are in place, such as pandoc-style {#...} header attributes."
                    ,"type": "boolean"
                    ,"since": "6.0.0"
                }
                ,"headingIdPandoc": {
                    "description": "When true appends pandoc-style {#...} heading identifiers where necessary. Note that independent from this setting input files may use pandoc-style heading identifiers for cross-linking by id."
                    ,"type": "boolean"
                    ,"since": "6.0.0"
                }
                ,"limitByAlternatives": {
                    "description": "This option can be used to deal with ambiguities and limit the number of links in case of multiple definitions of a term. For example, a value of \n 5: makes the system link to _at most 5_ alternative definitions per term\n-5: makes the system _stop linking a term_ once there are _at least 5_ alternative definitions\n 0: links the term to a single definition but provides 0 indication of alternative definitions (even if there are any).\nNegative values may also be helpful when using 'glossaries' option with a glob pattern and there are multiple documents that follow a certain heading template such that the same heading appears more than once."
                    ,"type": "integer"
                    ,"minimum": "-95"
                    ,"maximum": "+95"
                }
                ,"limitByTermOrigin": {
                    "description": "Limits linkification based on the filesystem hierarchy of a book project. For example, `[\"parent\", \"sibling\", \"self\"]` causes a term occurrence being linkified only when a term has been defined in a glossary in a parent directory (\"parent\") or when it has been defined in a glossary next to the document file (\"sibling\") or within the glossary itself (\"self\"). The option allows for a hierarchy of glossaries e.g. a top-level glossary for common terms linked throughout a book and glossaries whose terms are being linked within a particular (sub-)directory/section branch, only. It may also provide a means of limiting auto-linking when the `glossaries` option is used with `file` wildcard patterns. Enumerating all elements is equivalent to keeping the array empty. It will make glossarify-md link each glossary term in every document. Defaults to `[]`."
                    ,"type": "array"
                    ,"items": {
                        "type": "string",
                        "enum": ["self", "parent", "sibling", "child", "parent-sibling"]
                    }
                    ,"since": "6.1.0"
                }
                ,"byReferenceDefinition": {
                    "description": "When 'true' replaces markdown inline links with numbered references to a link reference definition list at the bottom of a markdown file. See 'Link Reference Definitions' on http://commonmark.org."
                    ,"type": "boolean"
                    ,"since": "6.0.0"
                }
            }
        }
        ,"unified": {
            "type": "object"
            ,"properties": {
                "rcPath": {
                    "description": "Path to an external *unified* configuration file as documented under https://github.com/unifiedjs/unified-engine/blob/main/doc/configure.md. See description of *unified* property why you may want such a configuration."
                    ,"type": "string"
                }
                ,"plugins": {
                    "description": "Object or array with names of *unified* and *remark* plug-ins and plug-in settings as described in https://github.com/unifiedjs/unified-engine/blob/main/doc/configure.md\nNote that this configuration is not to be considered part of glossarify-md's own configuration interface!\nIf you like to keep *unified* configuration separate use 'rcPath' to load a unified configuration from an external file."
                    ,"oneOf": [{
                        "type": "array"
                        ,"title": "Unified Plug-in Configuration (Array Syntax)"
                        ,"items": {
                            "oneOf": [
                                { "type": "string" }
                                ,{ "type": "object", "title": "Plug-in options" }
                            ]
                        }
                    },{
                        "type": "object"
                        , "title": "Unified Plug-in Configuration (Object Syntax)"
                    }]
                }
                ,"settings": {
                    "description": "Unified _processor_ settings as described in https://github.com/unifiedjs/unified-engine/blob/main/doc/configure.md . glossarify-md uses the \"remark\" Markdown processor. To customize Markdown output style you can apply any _formatting options_ documented at https://github.com/syntax-tree/mdast-util-to-markdown#formatting-options which is the module used by 'remark-stringify' to serialize (compile) the Markdown Abstract Syntax Tree that was created from Markdown text input back into Markdown text output."
                    ,"type": "object"
                }

            }
            ,"not": {
                "required": ["plugins", "rcPath"]
            }
        }
        ,"dev": {
            "type": "object"
            ,"properties": {
                "printInputAst": {
                    "description": "Print the AST of scanned markdown documents prior to linkification. May be a Regex to only print AST for particular document."
                    ,"type": ["boolean", "string"]
                }
                ,"printOutputAst": {
                    "description": "Print the AST of scanned markdown documents after linkification. May be a Regex to only print AST for particular document."
                    ,"type": ["boolean", "string"]
                }
                ,"reportsFile": {
                    "description": "File where to write console report output. Enables testing the report output generated  by the 'writer' component."
                    ,"type": "string"
                }
                ,"reproducablePaths": {
                    "description": "Write system-independent paths into 'termsFile' to produce reproducable output across environments."
                    ,"type": "boolean"
                }
                ,"termsFile": {
                    "description": "File where to write term book to. Enables testing the term extraction results of the 'terminator' component."
                    ,"type": "string"
                }
                ,"effectiveConfFile": {
                    "description": "File where to write the configuration that is applied effectively after merging config file, cli opts and schema defaults."
                    ,"type": "string"
                }
            }
        }
    }
}
