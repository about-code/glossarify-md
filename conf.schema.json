{
    "$schema": "http://json-schema.org/draft-07/schema",
    "$id": "https://raw.githubusercontent.com/about-code/glossarify-md/v3.4.0/conf.schema.json",
    "type": "object",
    "properties": {
        "baseDir": {
            "description": "Path to directory where to search for the glossary file and markdown files. All paths in a config file will be relative to *baseDir*. *baseDir* itself is relative to the location of the config file or the current working directory when provided via command line.",
            "type": "string",
            "alias": "d",
            "default": ""
        },
        "baseUrl": {
            "description": "The base url to use when creating absolute links to glossary.",
            "type": "string",
            "format": "url",
            "alias": "b",
            "default": "http://127.0.0.1"
        },
        "excludeFiles": {
            "description": "An array of files or file name patterns that should not be included in any processing.",
            "type": "array",
            "items": {
                "type": "string"
            },
            "alias": "e",
            "default": ["node_modules", ".git"]
        },
        "experimentalFootnotes": {
            "description": "Enable support for markdown footnotes as defined in https://pandoc.org/MANUAL.html#footnotes. Footnotes are considered 'experimental' until they become part of the CommonMark Specification at https://spec.commonmark.org.",
            "type": "boolean",
            "alias": "",
            "default": false
        },
        "force": {
            "description": "Choose true, only if you know the consequences.",
            "type": "boolean",
            "default": false
        },
        "generateFiles": {
            "description": "File generation options.",
            "$ref": "#/$defs/GenerateFilesOpts",
            "default": {}
        },
        "glossaries": {
            "description": "An array of glossaries. Allows for different kinds of glossaries and definitions.",
            "type": "array",
            "items": {
                "$ref": "#/$defs/GlossariesOpts"
            },
            "alias": "g",
            "default": [
                { "file": "./glossary.md", "termHint": ""}
            ]
        },
        "ignoreCase": {
            "description": "Find and link every occurrence of a term no matter how it is spelled.",
            "type": "boolean",
            "alias": "i",
            "default": false
        },
        "includeFiles": {
            "description": "Path or glob patterns of files to include for linking to glossaries.",
            "type": "array",
            "items": {
                "type": "string"
            },
            "alias": "f",
            "default": ["."]
        },
        "indexing": {
            "description": "Path or glob patterns of files to include for linking to glossaries.",
            "$ref": "#/$defs/IndexingOpts",
            "default": {}
        },
        "i18n": {
            "description": "Internationalization and collation options. See https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Collator/Collator.",
            "$ref": "#/$defs/IntlOpts",
            "default": {}
        },
        "keepRawFiles": {
            "description": "Glob patterns for (markdown) files to copy from 'baseDir' to 'outDir' but to ignore by the linker. Non-markdown files will be ignored anyways.",
            "type": "array",
            "items": {
                "type": "string"
            },
            "alias": "r",
            "default": []
        },
        "linking": {
            "description": "Whether to use relative or absolute links. Choosing 'absolute' requires a 'baseUrl'.",
            "type": "string",
            "enum": [
                "relative",
                "absolute"
            ],
            "alias": "l",
            "default": "relative"
        },
        "outDir": {
            "description": "Path to directory where to write processed files to.",
            "type": "string",
            "alias": "o",
            "default": ""
        },
        "outDirDropOld": {
            "description": "If true, remove old 'outDir' before creating a new one. Otherwise just overwrite old files.",
            "type": "boolean",
            "alias": "",
            "default": false
        },
        "reportNotMentioned": {
            "description": "Report on terms which exist in a glossary but have neither been mentioned directly nor with any of its aliases.",
            "type": "boolean",
            "alias": "",
            "default": false
        },
        "dev": {
            "descriptions": "Options for testing and debugging",
            "$ref": "#/$defs/DevOpts",
            "default": {}
        }
    },
    "$defs": {
        "GenerateFilesOpts": {
            "type": "object",
            "properties": {
                "indexFile": {
                    "description": "Generate a file with a list of glossary terms and where they have been used.",
                    "oneOf": [{
                        "type": "object",
                        "$ref": "#/$defs/IndexFileOpts"
                    },{
                        "type": "string",
                        "description": "String value range is deprecated and will be removed with v4. Use object notation instead."
                    }],
                    "default": ""
                },
                "listOf": {
                    "description": "Generate an arbitrary 'List of {x}' from HTML anchors with css class {x}. E.g. Generate a List of Listings from every <a class='listings' id='listing-1', title='Listing 1' /> and link to those anchors.",
                    "type": "array",
                    "items": {
                        "type": "object",
                        "properties": {
                            "class": {
                                "description": "The CSS class to look for in anchor elements",
                                "type": "string"
                            },
                            "file": {
                                "description": "Path relative to 'outDir' where to create the output file.",
                                "type": "string"
                            },
                            "title": {
                                "description": "The page title for the index file. If missing it's being inferred from the value of 'class'.",
                                "type": "string"
                            }
                        }
                    }
                },
                "listOfFigures": {
                    "description": "Generate a file with a list of figures and where they can be found.",
                    "type": "object",
                    "$ref": "#/$defs/IndexFileOpts",
                    "default": ""
                },
                "listOfTables": {
                    "description": "Generate a file with a list of tables and where they can be found.",
                    "type": "object",
                    "$ref": "#/$defs/IndexFileOpts",
                    "default": ""
                }
            }
        },
        "IndexFileOpts": {
            "type": "object",
            "properties": {
                "file":  {
                    "description": "Path relative to 'outDir' where to create the index markdown file.",
                    "type": "string"
                },
                "title": {
                    "description": "The page title for the index file. If missing the application uses a default value.",
                    "type": "string"
                }
            }
        },
        "IndexingOpts": {
            "type": "object",
            "properties": {
                "groupByHeadingDepth": {
                    "description": "Level of detail by which to group occurrences of terms or syntactic elements in generated files (Range [min, max]: [0, 6]). For example, use 0 to not group at all; 1 to group things at the level of document titles, etc. Configures the indexer. The option affects any files generated from the internal AST node index.",
                    "type": "number",
                    "minimum": 0,
                    "maximum": 6,
                    "default": 0
                }
            }
        },
        "IntlOpts": {
            "type": "object",
            "properties": {
                "caseFirst": {
                    "description": "Whether upper case or lower case should sort first. Default: 'false' (Use locale's default). See https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Collator/Collator",
                    "type": "string",
                    "enum": ["upper", "lower", "false"]
                },
                "locale": {
                    "description": "The locale to use for operations such as sorting. See https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Collator/Collator",
                    "type": "string"
                },
                "localeMatcher": {
                    "description": "The locale matching algorithm to use. Default: 'best fit'. See https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Collator/Collator",
                    "type": "string",
                    "enum": ["best fit", "lookup"]
                },
                "numeric": {
                    "description": "Whether to use numeric collation. Default: false. See https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Collator/Collator",
                    "type": "boolean"
                },
                "ignorePunctuation": {
                    "description": "Whether punctuation should be ignored. Default: false. See https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Collator/Collator",
                    "type": "boolean"
                },
                "sensitivity": {
                    "description": "Which differences in the strings should lead to non-zero result values. Default: 'variant' for sorts, locale dependent for searches. See https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Collator/Collator",
                    "type": "string",
                    "enum": ["base", "accent", "case", "variant"]
                },
                "usage": {
                    "description": "Whether the comparison is for sorting or for searching for matching strings. Default: 'sort'. See https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Collator/Collator",
                    "type": "string",
                    "enum": ["sort", "search"]
                }
            }
        },
        "GlossariesOpts": {
            "type": "object",
            "properties": {
                "file": {
                    "description": "Name of the glossary file. Conventional default is 'glossary.md'",
                    "type": "string"
                },
                "termHint": {
                    "description": "A symbol to append to a link to denote that the term refers to a glossary term.",
                    "type": "string"
                },
                "sort": {
                    "description": "If present, sort terms in output glossary. Default: None. See also i18n options.",
                    "type": "string",
                    "enum": ["asc", "desc"]
                }
            }
        },
        "DevOpts": {
            "type": "object",
            "properties": {
                "printInputAst": {
                    "description": "Print the AST of scanned markdown documents prior to linkification. May be a Regex to only print AST for particular document.",
                    "type": ["boolean", "string"]
                },
                "printOutputAst": {
                    "description": "Print the AST of scanned markdown documents after linkification. May be a Regex to only print AST for particular document.",
                    "type": ["boolean", "string"]
                },
                "reportsFile": {
                    "description": "File where to write console report output. Enables testing the report output generated  by the 'writer' component.",
                    "type": "string"
                },
                "reproducablePaths": {
                    "description": "Write system-independent paths into 'termsFile' to produce reproducable output accross environments.",
                    "type": "boolean"
                },
                "termsFile": {
                    "description": "File where to write term book to. Enables testing the term extraction results of the 'terminator' component.",
                    "type": "string"
                }
            }
        }
    }
}
